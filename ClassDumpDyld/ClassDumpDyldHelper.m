//
//  ClassDumpDyldHelper.m
//  ClassDumpDyld
//
//  Created by JH on 2024/1/26.
//

#import "ClassDumpDyldHelper.h"
#import <mach-o/dyld.h>
@implementation ClassDumpDyldHelper

+ (BOOL)isMachOExecutable:(const char *)image {
    FILE *machoFile = fopen(image, "rb");

    if (machoFile == 0) {
        return NO;
    }

    //#ifdef __LP64__
    struct mach_header_64 machHeader;
    //#else
    // mach_header machHeader;
    //#endif

    unsigned long n = fread(&machHeader, sizeof(machHeader), 1, machoFile);

    if (n != 1) {
        fclose(machoFile);
        return NO;
    }

    BOOL isExec = machHeader.filetype == MH_EXECUTE;

    fclose(machoFile);
    return isExec;
}

+ (BOOL)is64BitMachO:(const char *)image {
    FILE *machoFile = fopen(image, "rb");

    if (machoFile == 0) {
        fclose(machoFile);
        return NO;
    }

    struct mach_header_64 machHeader;
    unsigned long n = fread(&machHeader, sizeof(machHeader), 1, machoFile);

    if (n != 1) {
        fclose(machoFile);
        return NO;
    }

    BOOL is64 = machHeader.magic != MH_MAGIC;  // instead of ==MH_MAGIC_64
    fclose(machoFile);
    return is64;
}

+ (BOOL)fileExistsOnDisk:(const char *)image {
    FILE *aFile = fopen(image, "r");
    BOOL exists = aFile != 0;

    fclose(aFile);
    return exists;
}

+ (BOOL)isArch64 {
#ifdef __LP64__
    return YES;

#endif
    return NO;
}

+ (long)locationOfString:(const char *)haystack needle:(const char *)needle {
    const char *found = strstr(haystack, needle);
    long anIndex = -1;

    if (found != NULL) {
        anIndex = found - haystack;
    }

    return anIndex;
}

+ (BOOL)hasMalformedIDWithParts:(NSString *)parts {
    if ([parts rangeOfString:@"@\""].location != NSNotFound &&
        [parts rangeOfString:@"@\""].location + 2 < parts.length - 1 &&
        ([[parts substringFromIndex:[parts rangeOfString:@"@\""].location + 2] rangeOfString:@"\""]
         .location == [[parts substringFromIndex:[parts rangeOfString:@"@\""].location + 2]
                       rangeOfString:@"\"\""]
         .location ||
         [[parts substringFromIndex:[parts rangeOfString:@"@\""].location + 2] rangeOfString:@"\""]
         .location == [[parts substringFromIndex:[parts rangeOfString:@"@\""].location + 2]
                       rangeOfString:@"\"]"]
         .location ||
         [[parts substringFromIndex:[parts rangeOfString:@"@\""].location + 2] rangeOfString:@"\""]
         .location ==
         [parts substringFromIndex:[parts rangeOfString:@"@\""].location + 2].length - 1)) {
        return YES;
    }

    return NO;
}

@end


long locationOfString(const char *haystack, const char *needle) {
    const char *found = strstr(haystack, needle);
    long anIndex = -1;

    if (found != NULL) {
        anIndex = found - haystack;
    }

    return anIndex;
}

BOOL isMachOExecutable(const char *image) {
    FILE *machoFile = fopen(image, "rb");

    if (machoFile == 0) {
        return NO;
    }

    //#ifdef __LP64__
    struct mach_header_64 machHeader;
    //#else
    // mach_header machHeader;
    //#endif

    unsigned long n = fread(&machHeader, sizeof(machHeader), 1, machoFile);

    if (n != 1) {
        fclose(machoFile);
        return NO;
    }

    BOOL isExec = machHeader.filetype == MH_EXECUTE;

    fclose(machoFile);
    return isExec;
}

BOOL is64BitMachO(const char *image) {
    FILE *machoFile = fopen(image, "rb");

    if (machoFile == 0) {
        fclose(machoFile);
        return NO;
    }

    struct mach_header_64 machHeader;
    unsigned long n = fread(&machHeader, sizeof(machHeader), 1, machoFile);

    if (n != 1) {
        fclose(machoFile);
        return NO;
    }

    BOOL is64 = machHeader.magic != MH_MAGIC;  // instead of ==MH_MAGIC_64
    fclose(machoFile);
    return is64;
}

BOOL fileExistsOnDisk(const char *image) {
    FILE *aFile = fopen(image, "r");
    BOOL exists = aFile != 0;

    fclose(aFile);
    return exists;
}

BOOL arch64(void) {
    // size_t size;
    // sysctlbyname("hw.cpu64bit_capable", NULL, &size, NULL, 0);
    // BOOL cpu64bit;
    // sysctlbyname("hw.cpu64bit_capable", &cpu64bit, &size, NULL, 0);
    // return cpu64bit;

#ifdef __LP64__
    return YES;

#endif
    return NO;
}

NSString * copyrightMessage(char *image) {
    @autoreleasepool {
        NSString *version = [NSProcessInfo processInfo].operatingSystemVersionString;
        NSLocale *loc = [NSLocale localeWithLocaleIdentifier:@"en-us"];
        NSString *date = [NSDate.date descriptionWithLocale:loc];

        NSString *message = [[NSString alloc] initWithFormat:@"/*\n\
    * This header is generated by "
                             @"classdump-dyld 1.0\n\
    * on %@\n\
    * "
                             @"Operating System: %@\n\
    * Image Source: "
                             @"%s\n\
    * classdump-dyld is licensed under "
                             @"GPLv3, Copyright \u00A9 2013-2016 by "
                             @"Elias Limneos.\n\
    */\n\n", date, version, image];

        return message;
    }
}

inline void loadBar(int x, int n, int r, int w, const char *className) {
    //    return;
    // Only update r times.
    if ((n / r) < 1) {
        return;
    }

    if (x % (n / r) != 0) {
        return;
    }

    // Calculuate the ratio of complete-to-incomplete.
    float ratio = x / (float)n;
    int c = ratio * w;

    // Show the percentage complete.
    printf("%3d%% [", (int)(ratio * 100));

    // Show the load bar.
    for (int x = 0; x < c; x++) {
        printf("=");
    }

    for (int x = c; x < w; x++) {
        printf(" ");
    }

    // ANSI Control codes to go back to the
    // previous line and clear it.
    printf("] %s %d/%d <%s>\n\033[F\033[J", [print_free_memory() UTF8String], x, n, className);
}
